package PacotePrincipal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Interface extends javax.swing.JFrame {

    private Estoque estoque;
    private Connection conexao;

    public Interface() {
        initComponents();
        try {
            conexao = ConexaoDB.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        estoque = new Estoque(1);
        atualizarTabela();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        txt_Titulo = new javax.swing.JLabel();
        btn_addItem = new javax.swing.JButton();
        txt_addItem = new javax.swing.JLabel();
        btn_atuItem = new javax.swing.JButton();
        txt_atuItem = new javax.swing.JLabel();
        btn_remItem = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTabela = new javax.swing.JTable();
        btn_BuscItem = new javax.swing.JButton();
        txt_BuscItem = new javax.swing.JLabel();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interface");

        txt_Titulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        txt_Titulo.setText("Estoque de Loja");

        btn_addItem.setText("Adicionar");
        btn_addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addItemActionPerformed(evt);
            }
        });

        txt_addItem.setText("Adicionar Item");

        btn_atuItem.setText("Atualizar");
        btn_atuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_atuItemActionPerformed(evt);
            }
        });

        txt_atuItem.setText("Atualizar Item");

        btn_remItem.setText("Remover");
        btn_remItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_remItemActionPerformed(evt);
            }
        });

        jLabel1.setText("Remover Item");

        JTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Modelo", "Marca", "Qtd", "$Compra", "$Venda"
            }
        ));
        jScrollPane1.setViewportView(JTabela);
        if (JTabela.getColumnModel().getColumnCount() > 0) {
            JTabela.getColumnModel().getColumn(0).setPreferredWidth(30);
            JTabela.getColumnModel().getColumn(1).setPreferredWidth(200);
            JTabela.getColumnModel().getColumn(2).setPreferredWidth(100);
            JTabela.getColumnModel().getColumn(3).setPreferredWidth(50);
        }

        btn_BuscItem.setText("Buscar");
        btn_BuscItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BuscItemActionPerformed(evt);
            }
        });

        txt_BuscItem.setText("Buscar Item");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_atuItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_atuItem, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_addItem)
                    .addComponent(txt_addItem))
                .addGap(172, 172, 172)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_remItem)
                    .addComponent(jLabel1)
                    .addComponent(btn_BuscItem, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(txt_BuscItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txt_Titulo)
                        .addGap(148, 148, 148))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(txt_Titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_addItem)
                    .addComponent(txt_BuscItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_addItem)
                    .addComponent(btn_BuscItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_atuItem)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_atuItem)
                    .addComponent(btn_remItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_remItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_remItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Informe o ID do produto a ser removido:");
        if (input != null) {
            try {
                int id = Integer.parseInt(input);
                String sql = "DELETE FROM produtos WHERE id = ?";
                PreparedStatement stmt = conexao.prepareStatement(sql);
                stmt.setInt(1, id);
                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Produto removido com sucesso!");
                    atualizarTabela();
                } else {
                    JOptionPane.showMessageDialog(this, "Produto n√£o encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException | SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao remover o produto.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btn_remItemActionPerformed

    private void btn_atuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_atuItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Informe o ID do produto a ser atualizado:");
        if (input != null) {
            try {
                int id = Integer.parseInt(input);
                Produto produto = estoque.buscarProdutoPorId(id);
                if (produto != null) {
                    String novoModelo = JOptionPane.showInputDialog(this, "Informe o novo Modelo:", produto.getModelo());
                    if (novoModelo == null) {
                        return;
                    }
                    String novaMarca = JOptionPane.showInputDialog(this, "Informe a nova Marca:", produto.getMarca());
                    if (novaMarca == null) {
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Produto n√£o encontrado!");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Erro: Insira um valor inteiro v√°lido para o ID do produto.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_atuItemActionPerformed

    private void btn_addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addItemActionPerformed
        try {
            String Modelo = JOptionPane.showInputDialog(this, "Informe o Modelo do produto:");
            if (Modelo == null) {
                return;
            }
            String Marca = JOptionPane.showInputDialog(this, "Informe a Marca do produto:");
            if (Marca == null) {
                return;
            }
            String quantidadeStr = JOptionPane.showInputDialog(this, "Informe a quantidade do produto:");
            if (quantidadeStr == null) {
                return;
            }
            int quantidade = Integer.parseInt(quantidadeStr);
            String precoDeCompraStr = JOptionPane.showInputDialog(this, "Informe o pre√ßo de compra do produto:");
            if (precoDeCompraStr == null) {
                return;
            }
            double precoDeCompra = Double.parseDouble(precoDeCompraStr);
            String precoDeVendaStr = JOptionPane.showInputDialog(this, "Informe o pre√ßo de venda do produto:");
            if (precoDeVendaStr == null) {
                return;
            }
            double precoDeVenda = Double.parseDouble(precoDeVendaStr);

            adicionarProduto(conexao, Modelo, Marca, quantidade, precoDeCompra, precoDeVenda);
            JOptionPane.showMessageDialog(this, "Produto adicionado com sucesso!");
            atualizarTabela();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro: Insira valores num√©ricos v√°lidos para quantidade, pre√ßo de compra e pre√ßo de venda.", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btn_addItemActionPerformed

    private void btn_BuscItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BuscItemActionPerformed
        String input = JOptionPane.showInputDialog(this, "Informe o ID do produto a ser buscado:");
        if (input != null) {
            try {
                int id = Integer.parseInt(input);
                String sql = "SELECT * FROM produtos WHERE id = ?";
                PreparedStatement stmt = conexao.prepareStatement(sql);
                stmt.setInt(1, id);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    String mensagem = "ID: " + rs.getInt("id") + "\n"
                            + "Modelo: " + rs.getString("modelo") + "\n"
                            + "Marca: " + rs.getString("marca") + "\n"
                            + "Quantidade: " + rs.getInt("quantidade") + "\n"
                            + "Pre√ßo de Compra: " + rs.getDouble("preco_compra") + "\n"
                            + "Pre√ßo de Venda: " + rs.getDouble("preco_venda");
                    JOptionPane.showMessageDialog(this, mensagem);
                } else {
                    JOptionPane.showMessageDialog(this, "Produto n√£o encontrado!");
                }
            } catch (NumberFormatException | SQLException e) {
                JOptionPane.showMessageDialog(this, "Erro ao buscar o produto.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_BuscItemActionPerformed

    private void atualizarTabela() {
        DefaultTableModel model = (DefaultTableModel) JTabela.getModel();
        model.setRowCount(0);
        try {
            Statement stmt = conexao.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM produtos");
            while (rs.next()) {
                Object[] rowData = {
                    rs.getInt("id"),
                    rs.getString("modelo"),
                    rs.getString("marca"),
                    rs.getInt("quantidade"),
                    rs.getDouble("preco_compra"),
                    rs.getDouble("preco_venda")
                };
                model.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void adicionarProduto(Connection conexao, String modelo, String marca, int quantidade, double precoDeCompra, double precoDeVenda) throws SQLException {
        String sql = "INSERT INTO produtos (modelo, marca, quantidade, preco_compra, preco_venda) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement stmt = conexao.prepareStatement(sql);
        stmt.setString(1, modelo);
        stmt.setString(2, marca);
        stmt.setInt(3, quantidade);
        stmt.setDouble(4, precoDeCompra);
        stmt.setDouble(5, precoDeVenda);
        stmt.executeUpdate();
    }

    private boolean removerProduto(Connection conexao, int id) throws SQLException {
        String sql = "DELETE FROM produtos WHERE id = ?";
        PreparedStatement stmt = conexao.prepareStatement(sql);
        stmt.setInt(1, id);
        int rowsAffected = stmt.executeUpdate();
        return rowsAffected > 0;
    }

    private Produto buscarProdutoPorId(Connection conexao, int id) throws SQLException {
        String sql = "SELECT * FROM produtos WHERE id = ?";
        PreparedStatement stmt = conexao.prepareStatement(sql);
        stmt.setInt(1, id);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            String modelo = rs.getString("modelo");
            String marca = rs.getString("marca");
            int quantidade = rs.getInt("quantidade");
            double precoDeCompra = rs.getDouble("preco_compra");
            double precoDeVenda = rs.getDouble("preco_venda");
            return new Produto(id, modelo, marca, quantidade, precoDeCompra, precoDeVenda);
        } else {
            return null;
        }
    }

    private void atualizarProduto(int id, String modelo, String marca, int quantidade, double precoDeCompra, double precoDeVenda) throws SQLException {
        String sql = "UPDATE produtos SET modelo = ?, marca = ?, quantidade = ?, preco_compra = ?, preco_venda = ? WHERE id = ?";
        PreparedStatement stmt = conexao.prepareStatement(sql);
        stmt.setString(1, modelo);
        stmt.setString(2, marca);
        stmt.setInt(3, quantidade);
        stmt.setDouble(4, precoDeCompra);
        stmt.setDouble(5, precoDeVenda);
        stmt.setInt(6, id);
        stmt.executeUpdate();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTabela;
    private javax.swing.JButton btn_BuscItem;
    private javax.swing.JButton btn_addItem;
    private javax.swing.JButton btn_atuItem;
    private javax.swing.JButton btn_remItem;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txt_BuscItem;
    private javax.swing.JLabel txt_Titulo;
    private javax.swing.JLabel txt_addItem;
    private javax.swing.JLabel txt_atuItem;
    // End of variables declaration//GEN-END:variables

}
